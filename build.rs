#![allow(non_snake_case)]

use std::fmt::Display;
use std::str::FromStr;
use std::sync::LazyLock;

use serde::{Serialize, Deserialize, Deserializer};
use anyhow::Result;
use indexmap::IndexMap;
use serde_json::json;
use handlebars::Handlebars;

fn main() -> Result<()> {
    println!("cargo::rerun-if-changed=datasets/datahub");

    country()?;

    Ok(())
}

/// ----------------------------------------------------------------------------
/// Datasets
/// ----------------------------------------------------------------------------
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
struct DataHubCountryCodes {
    /// e.g., AF
    #[serde(rename(deserialize = "ISO3166-1-Alpha-2"))]
    pub ISO3166_1_Alpha_2: String,

    /// e.g., AFG
    #[serde(rename(deserialize = "ISO3166-1-Alpha-3"))]
    pub ISO3166_1_Alpha_3: String,

    /// e.g., Afghanistan
    pub official_name_en: String,

    /// e.g., 93
    #[serde(deserialize_with = "de_dial")]
    pub Dial: i32,
}

static DATAHUB_COUNTRY_CODES: LazyLock<IndexMap<String, DataHubCountryCodes>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("datasets/datahub/country-codes.csv").expect("missing country-codes.csv");
    let mut map = IndexMap::new();

    for (idx, val) in csv.deserialize().enumerate() {
        let val: DataHubCountryCodes = val.expect("parse country-codes.csv failed");

        assert!(!val.ISO3166_1_Alpha_2.is_empty(), "ISO3166_1_Alpha_2 index {} empty", idx + 2);
        assert!(!val.ISO3166_1_Alpha_3.is_empty(), "ISO3166_1_Alpha_3 index {} empty", idx + 2);
        assert!(val.Dial > 0);

        map.insert(val.ISO3166_1_Alpha_2.clone(), val);
    }

    map
});

pub fn de_dial<'de, D, V>(deserializer: D) -> Result<V, D::Error>
where
    D: Deserializer<'de>,
    V: FromStr,
    <V as FromStr>::Err: Display
{
    let s = String::deserialize(deserializer)?;
    s.split(['-', ' ', '\t']).next().unwrap_or("").parse().map_err(serde::de::Error::custom)
}

/// ----------------------------------------------------------------------------
/// Country
/// ----------------------------------------------------------------------------
fn country() -> Result<()> {
    let countries: Vec<DataHubCountryCodes> = DATAHUB_COUNTRY_CODES.iter().map(|(_, v)| v.clone()).collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Country
pub enum Country {
{{#each countries}}
    {{this.ISO3166_1_Alpha_2}}, // {{this.official_name_en}}
{{/each}}
}
"#)?;

    std::fs::write("src/country.rs", template.render("default", &json!({"countries": countries}))?)?;

    Ok(())
}
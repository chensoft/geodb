use std::sync::LazyLock;

use serde::{Serialize, Deserialize};
use anyhow::Result;
use indexmap::{indexmap, IndexMap};
use handlebars::Handlebars;

fn main() -> Result<()> {
    println!("cargo::rerun-if-changed=datasets");

    country()?;

    Ok(())
}

/// ----------------------------------------------------------------------------
/// Datasets
/// ----------------------------------------------------------------------------
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
struct CountryCode {
    /// e.g., US
    pub alpha2: String,

    /// e.g., USA
    pub alpha3: String,

    /// e.g., 840
    pub numeric: i32,
}

static COUNTRY_CODE: LazyLock<IndexMap<String, CountryCode>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("datasets/country-code.csv").expect("missing country code");
    let mut map = IndexMap::new();

    for val in csv.deserialize() {
        let val: CountryCode = val.expect("parse country code failed");
        map.insert(val.alpha2.clone(), val);
    }

    map
});

/// ----------------------------------------------------------------------------
/// Country
/// ----------------------------------------------------------------------------
fn country() -> Result<()> {
    let country_code: Vec<CountryCode> = COUNTRY_CODE.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Country
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize)]
pub enum Country {
{{#each country_code}}
    {{this.alpha2}},
{{/each}}
}

impl Country {
    /// ISO 3166-1 alpha3 code
    pub fn alpha3(&self) -> &str {
        match self {
{{#each country_code}}
            Self::{{this.alpha2}} => "{{this.alpha3}}",
{{/each}}
        }
    }

    /// ISO 3166-1 numeric code
    pub fn numeric(&self) -> i32 {
        match self {
{{#each country_code}}
            Self::{{this.alpha2}} => {{this.numeric}},
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/country/country_code.rs", template.render("default", &indexmap! { "country_code" => country_code})?)?;

    Ok(())
}
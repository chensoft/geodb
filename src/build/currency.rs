use std::sync::LazyLock;

use serde::{Serialize, Deserialize};
use anyhow::Result;
use indexmap::IndexMap;
use handlebars::Handlebars;

#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
pub struct Currency {
    /// e.g., "USD"
    pub code: String,

    /// e.g., 840
    pub numeric: i32,

    /// e.g., 2
    pub minor: i32,

    /// e.g., "US Dollar"
    pub name: String,
}

pub static CURRENCIES: LazyLock<IndexMap<String, Currency>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("datasets/currency.csv").expect("missing currency file");
    let mut map = IndexMap::new();

    for val in csv.deserialize() {
        let val: Currency = val.expect("parse currency failed");
        map.insert(val.code.clone(), val);
    }

    map
});

pub fn generate() -> Result<()> {
    let currencies: Vec<Currency> = CURRENCIES.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Currency
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize, EnumIter)]
pub enum Currency {
{{#each currencies}}
    {{this.code}},
{{/each}}
}

impl Currency {
    /// Get currency from code
    pub fn from_code(code: &str) -> Option<Self> {
        match code {
{{#each currencies}}
            "{{this.code}}" => Some(Self::{{this.code}}),
{{/each}}
            _ => None,
        }
    }

    /// ISO 4217 currency code
    pub fn code(&self) -> &str {
        match self {
{{#each currencies}}
            Self::{{this.code}} => "{{this.code}}",
{{/each}}
        }
    }

    /// The numeric code is the same as the numeric country code where possible
    pub fn numeric(&self) -> i32 {
        match self {
{{#each currencies}}
            Self::{{this.code}} => {{this.numeric}},
{{/each}}
        }
    }

    /// For currencies having minor units, ISO 4217:2015 also shows the relationship between the minor unit and the currency itself
    pub fn minor(&self) -> i32 {
        match self {
{{#each currencies}}
            Self::{{this.code}} => {{this.minor}},
{{/each}}
        }
    }

    /// ISO 4217 currency name
    pub fn name(&self) -> &str {
        match self {
{{#each currencies}}
            Self::{{this.code}} => "{{this.name}}",
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/currency.rs", template.render("default", &indexmap! { "currencies" => currencies})?)?;

    Ok(())
}
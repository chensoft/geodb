use super::dataset::*;

use anyhow::Result;
use handlebars::Handlebars;

pub fn country_code() -> Result<()> {
    let country_code: Vec<CountryCode> = COUNTRY_CODE.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Country
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize)]
pub enum Country {
{{#each country_code}}
    {{this.alpha2}},
{{/each}}
}

impl Country {
    /// ISO 3166-1 alpha3 code
    pub fn alpha3(&self) -> &str {
        match self {
{{#each country_code}}
            Self::{{this.alpha2}} => "{{this.alpha3}}",
{{/each}}
        }
    }

    /// ISO 3166-1 numeric code
    pub fn numeric(&self) -> i32 {
        match self {
{{#each country_code}}
            Self::{{this.alpha2}} => {{this.numeric}},
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/country/country_code.rs", template.render("default", &indexmap! { "country_code" => country_code})?)?;

    Ok(())
}
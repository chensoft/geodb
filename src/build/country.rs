use std::sync::LazyLock;

use serde::{Serialize, Deserialize};
use anyhow::Result;
use indexmap::IndexMap;
use handlebars::Handlebars;

#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
pub struct Country {
    /// e.g., "US"
    pub code2: String,

    /// e.g., "USA"
    pub code3: String,

    /// e.g., 840
    pub numeric: i32,
}

pub static COUNTRIES: LazyLock<IndexMap<String, Country>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("datasets/country.csv").expect("missing country file");
    let mut map = IndexMap::new();

    for val in csv.deserialize() {
        let val: Country = val.expect("parse country failed");
        map.insert(val.code2.clone(), val);
    }

    map
});

pub fn generate() -> Result<()> {
    let countries: Vec<Country> = COUNTRIES.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Country
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize, EnumIter)]
pub enum Country {
{{#each countries}}
    {{this.code2}},
{{/each}}
}

impl Country {
    /// Get country from code
    pub fn from_code(code: &str) -> Option<Self> {
        match code {
{{#each countries}}
            "{{this.code2}}" => Some(Self::{{this.code2}}),
{{/each}}

{{#each countries}}
            "{{this.code3}}" => Some(Self::{{this.code2}}),
{{/each}}

            _ => None,
        }
    }

    /// Get country from number
    pub fn from_num(num: i32) -> Option<Self> {
        match num {
{{#each countries}}
            {{this.numeric}} => Some(Self::{{this.code2}}),
{{/each}}
            _ => None,
        }
    }

    /// ISO 3166-1 alpha2 code
    pub fn code2(&self) -> &str {
        match self {
{{#each countries}}
            Self::{{this.code2}} => "{{this.code2}}",
{{/each}}
        }
    }

    /// ISO 3166-1 alpha3 code
    pub fn code3(&self) -> &str {
        match self {
{{#each countries}}
            Self::{{this.code2}} => "{{this.code3}}",
{{/each}}
        }
    }

    /// ISO 3166-1 numeric code
    pub fn numeric(&self) -> i32 {
        match self {
{{#each countries}}
            Self::{{this.code2}} => {{this.numeric}},
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/country.rs", template.render("default", &indexmap! { "countries" => countries})?)?;

    Ok(())
}
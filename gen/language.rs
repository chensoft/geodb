use std::sync::LazyLock;

use serde::{Serialize, Deserialize};
use anyhow::Result;
use indexmap::IndexMap;
use handlebars::Handlebars;

#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
pub struct Language {
    /// e.g., "ja-JP"
    pub code: String,

    /// e.g., "Japanese (Japan)"
    pub name: String,

    /// e.g., "日本語 (日本)"
    pub native: String,
}

pub static LANGUAGES: LazyLock<IndexMap<String, Language>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("res/language.csv").expect("missing language file");
    let mut map = IndexMap::new();

    for val in csv.deserialize() {
        let val: Language = val.expect("parse language failed");
        map.insert(val.code.clone(), val);
    }

    map
});

pub fn generate() -> Result<()> {
    handlebars_helper!(code: |v: String| {
        v.replace("-", "_").to_ascii_uppercase()
    });

    let languages: Vec<Language> = LANGUAGES.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_helper("code", Box::new(code));
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //
#![allow(non_camel_case_types)]

/// Language
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize, EnumIter)]
pub enum Language {
{{#each languages}}
    {{code this.code}},
{{/each}}
}

impl Language {
    /// Get language from code
    pub fn from_code(code: &str) -> Option<Self> {
        match code {
{{#each languages}}
            "{{this.code}}" => Some(Self::{{code this.code}}),
{{/each}}
            _ => None,
        }
    }

    /// Language code
    pub const fn code(&self) -> &'static str {
        match self {
{{#each languages}}
            Self::{{code this.code}} => "{{this.code}}",
{{/each}}
        }
    }

    /// Language name
    pub const fn name(&self) -> &'static str {
        match self {
{{#each languages}}
            Self::{{code this.code}} => "{{this.name}}",
{{/each}}
        }
    }

    /// Language native name
    pub const fn native(&self) -> &'static str {
        match self {
{{#each languages}}
            Self::{{code this.code}} => "{{this.native}}",
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/language.rs", template.render("default", &indexmap! { "languages" => languages})?)?;

    Ok(())
}
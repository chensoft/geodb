use std::sync::LazyLock;

use serde::{Serialize, Deserialize};
use anyhow::Result;
use indexmap::IndexMap;
use handlebars::Handlebars;

#[derive(Debug, Default, Clone, Serialize, Deserialize)]
#[serde(default)]
pub struct Continent {
    /// e.g., "NA"
    pub code: String,

    /// e.g., "North America"
    pub name: String,
}

pub static CONTINENTS: LazyLock<IndexMap<String, Continent>> = LazyLock::new(|| {
    let mut csv = csv::Reader::from_path("csv/continent.csv").expect("missing continent file");
    let mut map = IndexMap::new();

    for val in csv.deserialize() {
        let val: Continent = val.expect("parse continent failed");
        map.insert(val.code.clone(), val);
    }

    map
});

pub fn generate() -> Result<()> {
    let continents: Vec<Continent> = CONTINENTS.values().cloned().collect();

    let mut template = Handlebars::new();
    template.register_template_string("default", r#"// !!!DO NOT EDIT THIS FILE!!! //

/// Continent
#[derive(Debug, Clone, Copy, Hash, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize, EnumIter)]
pub enum Continent {
{{#each continents}}
    {{this.code}},
{{/each}}
}

impl Continent {
    /// Get continent from code
    pub fn from_code(code: &str) -> Option<Self> {
        match code {
{{#each continents}}
            "{{this.code}}" => Some(Self::{{this.code}}),
{{/each}}
            _ => None,
        }
    }

    /// Continent code
    pub const fn code(&self) -> &'static str {
        match self {
{{#each continents}}
            Self::{{this.code}} => "{{this.code}}",
{{/each}}
        }
    }

    /// Continent name
    pub const fn name(&self) -> &'static str {
        match self {
{{#each continents}}
            Self::{{this.code}} => "{{this.name}}",
{{/each}}
        }
    }
}"#)?;

    std::fs::write("src/continent.rs", template.render("default", &indexmap! { "continents" => continents})?)?;

    Ok(())
}